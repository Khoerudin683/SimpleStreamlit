# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UVeU5PGTCN9YzY-Us8Kw7HTaiUJk6GFh
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
import seaborn as sns

# Load the model
with open("iris_model.pkl", "rb") as f:
    model = pickle.load(f)

# Load Iris data
iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_df['target'] = iris.target
iris_df['species'] = iris_df['target'].apply(lambda x: iris.target_names[x])

# Sidebar navigation
st.sidebar.title("Iris Classifier App")
page = st.sidebar.radio("Go to", ["Data Description", "Prediction", "Visualization"])

# --- Page 1: Data Description ---
if page == "Data Description":
    st.title("ðŸŒ¸ Iris Dataset Description")
    st.write("This dataset contains 150 observations of iris flowers with four features:")
    st.write(", ".join(iris.feature_names))
    st.dataframe(iris_df.head())

    st.markdown("**Class Distribution:**")
    st.bar_chart(iris_df['species'].value_counts())

# --- Page 2: Prediction ---
elif page == "Prediction":
    st.title("ðŸ”® Predict Iris Species")
    st.write("Enter the measurements:")

    sepal_length = st.slider("Sepal Length (cm)", 4.0, 8.0, 5.8)
    sepal_width = st.slider("Sepal Width (cm)", 2.0, 4.5, 3.0)
    petal_length = st.slider("Petal Length (cm)", 1.0, 7.0, 4.3)
    petal_width = st.slider("Petal Width (cm)", 0.1, 2.5, 1.3)

    input_data = np.array([[sepal_length, sepal_width, petal_length, petal_width]])
    prediction = model.predict(input_data)
    prediction_label = iris.target_names[prediction[0]]

    st.subheader("ðŸŒ¼ Predicted Species:")
    st.success(prediction_label)

# --- Page 3: Visualization ---
elif page == "Visualization":
    st.title("ðŸ“Š Data Visualizations")
    st.write("Explore pairwise relationships in the dataset.")

    fig = sns.pairplot(iris_df, hue="species", diag_kind="kde")
    st.pyplot(fig)

    st.write("Correlation Heatmap:")
    fig2, ax = plt.subplots()
    sns.heatmap(iris_df.iloc[:, :4].corr(), annot=True, cmap="coolwarm", ax=ax)
    st.pyplot(fig2)